syntax = "proto3";

package io.candysea.candymint.v1;

import "api/common/types/price.proto";
import "api/common/types/chain.proto";
import "google/protobuf/timestamp.proto";

option java_package = "io.candysea.candymint.v1";

service CandyMintService {
  rpc CreateCollection (CreateCollectionRequest) returns (Collection) {};
  rpc GetCollection (GetCollectionRequest) returns (Collection) {};
  rpc ListCollections (ListCollectionsRequest) returns (ListCollectionsResponse) {};
  rpc UpdateCollection (UpdateCollectionRequest) returns (Collection) {};
  rpc UpdateCollectionMetadata (UpdateCollectionMetadataRequest) returns (Collection) {};
  rpc ListReleases (ListReleasesRequest) returns (ListReleasesResponse) {};
  rpc ListNFTs (ListNFTsRequest) returns (ListNFTsResponse) {};
  rpc GetNFT (GetNFTRequest) returns (NFT) {};
}

message Collection {
  string name = 1;
  string description = 2;
  string cover_uri = 3;
  string author = 4;
  string github_repo_uri = 5;
  string github_access_token = 6;
  // readonly
  Chain chain = 7;
  // readonly
  float price = 8;
  // readonly
  int32 supply_count = 9;
  Release lastest_release = 9;
  google.protobuf.Timestamp create_time = 10;
  google.protobuf.Timestamp update_time = 11;
}

message Release {
  enum Status {
    STATUS_UNSPECIFIED = 0;
    PROCESSING = 1;
    PROCESS_SUCCEEDED = 2;
    PROCESS_FAILED = 3;
    PUBLISHED = 4;
  }
  string version = 1;
  Status status = 2;
  string wasm_uri = 3;
  string commit_hash = 4;
  google.protobuf.Timestamp create_time = 5;
}

message NFT {
  string id = 1;
  Collection collection = 2;
  float min_price = 3;
  google.protobuf.Timestamp mint_time = 4;
}

message CreateCollectionRequest {
  string name = 1;
  string description = 2;
  string cover_uri = 3;
  // the HTTPS URI of the GitHub repository
  string github_repo_uri = 4;
  // TOOD: consider using OAuth2 instead
  string github_access_token = 5;
}

message GetCollectionRequest {
  string name = 1;
}

message ListCollectionsRequest {
  enum Channel {
    CHANNEL_UNSPECIFIED = 0;
    TOP_MINTED = 1;
  }
  Channel channel = 1;
  int32 limit = 2;
  int32 offset = 3;
}

message ListCollectionsResponse {
  repeated Collection collections = 1;
  int32 total = 2;
}

message UpdateCollectionRequest {
  string name = 1;
  string description = 2;
  string cover_uri = 3;
}

message UpdateCollectionMetadataRequest {
  Chain chain = 1;
  float price = 2;
  int32 supply_count = 3;
}

message ListReleasesRequest {
  string collection_name = 1;
  int32 limit = 2;
  int32 offset = 3;
}

message ListNFTsRequest {
  string collection_name = 1;
  int32 limit = 2;
  int32 offset = 3;
}

message ListNFTsResponse {
  repeated NFT nfts = 1;
  int32 total = 2;
}

message GetNFTRequest {
  string collection_name = 1;
  string nft_id = 2;
}

