syntax = "proto3";

package io.candysea.candymint.v1;

import "candymint/v1/collection.proto";
import "candymint/v1/events.proto";
import "candymint/v1/inscription.proto";
import "candymint/v1/nft.proto";
import "candymint/v1/public_collection.proto";
import "candymint/v1/release.proto";
import "candymint/v1/repo_tag.proto";
import "candymint/v1/utxo.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/originpoint-at/candysea-apis/candymint/v1";
option java_multiple_files = true;
option java_package = "io.candysea.candymint.v1";

service CandyMintService {
  rpc LoginWithWallet(LoginWithWalletRequest) returns (LoginWithWalletResponse) {}
  rpc RefreshToken(google.protobuf.Empty) returns (RefreshTokenResponse) {}
  rpc ListRepoTags(ListRepoTagsRequest) returns (ListRepoTagsResponse) {}

  rpc CreateCollection(CreateCollectionRequest) returns (Collection) {}
  rpc GetCollection(GetCollectionRequest) returns (Collection) {}
  rpc ListCollections(ListCollectionsRequest) returns (ListCollectionsResponse) {}
  rpc ListPublicCollections(ListPublicCollectionsRequest) returns (ListPublicCollectionsResponse) {}
  rpc UpdateCollection(UpdateCollectionRequest) returns (Collection) {}
  rpc TogglePauseCollection(TogglePauseCollectionRequest) returns (google.protobuf.Empty) {}
  rpc CreateRelease(CreateReleaseRequest) returns (Release) {}
  rpc PublishRelease(PublishReleaseRequest) returns (google.protobuf.Empty) {}
  rpc ListReleases(ListReleasesRequest) returns (ListReleasesResponse) {}
  rpc GetRelease(GetReleaseRequest) returns (Release) {}
  rpc BindCollectionOnChainData(BindCollectionOnChainDataRequest) returns (Collection) {}
  rpc GetMintPermit(GetMintPermitRequest) returns (GetMintPermitResponse) {}

  rpc ListNftIds(ListNftIdsRequest) returns (ListNftIdsResponse) {}
  rpc ListNFTs(ListNFTsRequest) returns (ListNFTsResponse) {}
  rpc GetNFT(GetNFTRequest) returns (Nft) {}
  rpc ListFeeDetailsEvents(ListFeeDetailsEventsRequest) returns (ListFeeDetailsEventsResponse) {}
  rpc ListFeeWithdrawnEvents(ListFeeWithdrawnEventsRequest) returns (ListFeeWithdrawnEventsResponse) {}
  rpc ListContracts(ListContractsRequest)returns(ListContractsResponse) {}

  rpc CreateInscriptionOrder(CreateInscriptionOrderRequest) returns (InscriptionOrder) {}
  rpc GetInscriptionOrder(GetInscriptionOrderRequest) returns (InscriptionOrder) {}
  rpc ListInscriptionOrders(ListInscriptionOrdersRequest) returns (ListInscriptionOrdersResponse) {}
  rpc ListInscriptions(ListInscriptionsRequest) returns (ListInscriptionsResponse) {}
  rpc ListUnspentUtxos(ListUnspentUtxosRequest) returns (ListUnspentUtxosResponse) {}
  rpc GetFeeRate(google.protobuf.Empty) returns (RecommendedFeeResponse) {}
  rpc CheckAvailableImage(CheckAvailableImageRequest) returns (CheckAvailableImageResponse) {}
  rpc ListPaidInscriptionOrders(ListPaidInscriptionOrdersRequest) returns (ListPaidInscriptionOrdersResponse) {}

}

message ListPublicCollectionsRequest {
  enum Channel {
    CHANNEL_UNSPECIFIED = 0;
    TOP_MINTED = 1;
  }
  Channel channel = 1;
  int32 limit = 2;
  int32 offset = 3;
  string chain_id = 4;
}

message ListPublicCollectionsResponse {
  repeated PublicCollection public_collections = 1;
  int32 total = 2;
}

message LoginWithWalletRequest {
  string address = 1;
  string signature = 2;
  string message = 3;
  google.protobuf.Timestamp timestamp = 4;
  string chain_id = 5;
}

message RefreshTokenResponse {
  string access_token = 1;
}

message LoginWithWalletResponse {
  string access_token = 1;
  string refresh_token = 2;
}

message CreateCollectionRequest {
  // unique name of the collection, will be used in the url
  string name = 1;
  string display_name = 2;
  string description = 3;
}

message GetCollectionRequest {
  string collection_name = 1;
  string chain_id = 2;
}

// just for Custom collection
message ListNftIdsRequest {
  enum Type {
    TYPE_UNSPECIFIED = 0;
    AVAILABLE = 1;
    MINTED = 2;
  }
  string collection_id = 1;
  int32 limit = 2;
  int32 offset = 3;
  Type type = 4;
}

message ListNftIdsResponse {
  message NftId {
    string token_id = 1;
    string image_id = 2;
  }
  repeated NftId nft_ids = 1;
  int32 total = 2;
}

message ListRepoTagsRequest {
  string collection_id = 1;
  string collection_name = 2;
}

message ListRepoTagsResponse {
  repeated io.candysea.candymint.v1.RepoTag tags = 1;
}

message ListCollectionsRequest {
  int32 limit = 1;
  int32 offset = 2;
  string chain_id = 3;
}

message ListCollectionsResponse {
  repeated Collection collections = 1;
  int32 total = 2;
}

message UpdateCollectionRequest {
  string collection_id = 1;
  string display_name = 2;
  string description = 3;
  string cover_file_id = 4;
  string github_repo_uri = 5;
  string github_access_token = 6;
  Collection.Type type = 7;
}

message BindCollectionOnChainDataRequest {
  string collection_id = 1;
  string nft_contract_address = 2;
}

message TogglePauseCollectionRequest {
  string collection_id = 1;
  bool is_pause = 2;
  string pause_announcement = 3;
}

message CreateReleaseRequest {
  string collection_id = 1;
  string tag = 2;
}

message PublishReleaseRequest {
  string release_id = 1;
  string announcement = 2;
  google.protobuf.Timestamp publish_time = 3;
}

message ListReleasesRequest {
  string collection_id = 1;
  string collection_name = 2;
  string chain_id = 3;
  int32 limit = 4;
  int32 offset = 5;
  Release.Status status = 6;
}

message GetReleaseRequest {
  string release_id = 1;
}

message ListReleasesResponse {
  repeated Release releases = 1;
  int32 total = 2;
}

message ListNFTsRequest {
  string collection_name = 1;
  int32 limit = 2;
  int32 offset = 3;
  string chain_id = 4;
  string address = 5;
}

message ListNFTsResponse {
  repeated Nft nfts = 1;
  int32 total = 2;
}

message GetNFTRequest {
  string collection_id = 1;
  string collection_name = 2;
  string token_id = 3;
  string chain_id = 4;
}

message ListFeeDetailsEventsRequest {
  int32 limit = 1;
  int32 offset = 2;
  string collection_id = 3;
}

message ListFeeDetailsEventsResponse {
  repeated FeeDetailsEvent feeDetailsEvents = 1;
  int64 total = 2;
}

message GetMintPermitRequest {
  string collection_id = 1;
  string release_id = 2;
  string image_id = 3;
}

message GetMintPermitResponse {
  string signature = 1;
  string base64_payload = 2;
  string traits = 3;
  int64 timestamp = 4;
}

message ListFeeWithdrawnEventsRequest {
  int32 limit = 1;
  int32 offset = 2;
  string collection_id = 3;
}

message ListFeeWithdrawnEventsResponse {
  repeated FeeWithdrawEvent feeWithdrawnEvents = 1;
  int64 total = 2;
}

message  ListContractsRequest{
  enum Type {
    UNSPECIFIED = 0;
    UNBOUND = 1;
  }
  int32 limit = 1;
  int32 offset = 2;
  Type type = 3;
}

message  ListContractsResponse{
  repeated NftContract contracts = 1;
  int32 total = 2;
}

message ListPaidInscriptionOrdersRequest {
  int32 limit = 1;
  int32 offset = 2;
  string collection_id = 3;
}

message ListPaidInscriptionOrdersResponse {
  repeated InscriptionOrder orders = 1;
  int32 total = 2;
}

message CreateInscriptionOrderRequest {
  string receiver = 1;
  string base64_payload = 2;
  string collection_id = 3;
  repeated NftAttribute attributes = 4;
  InscriptionType order_type = 5;
  // sig or token id
  string image_id = 6;
}

message CreateInscriptionOrderResponse {
  InscriptionOrder.OrderState order_state = 1;
  string order_id = 2;
}

message GetInscriptionOrderRequest {
  string order_id = 1;
}

message ListInscriptionOrdersRequest {
  int32 limit = 1;
  int32 offset = 2;
  string address = 3;
}

message ListInscriptionOrdersResponse {
  repeated InscriptionOrder orders = 1;
  int32 total = 2;
}

message ListInscriptionsRequest {
  int32 limit = 1;
  int32 offset = 2;
  string address = 3;
  string chain_id = 4;
}

message ListInscriptionsResponse {
  repeated Inscription inscriptions = 1;
  int32 total = 2;
}

message ListUnspentUtxosRequest {
  int32 limit = 1;
  int32 offset = 2;
  string address = 3;
}

message ListUnspentUtxosResponse {
  repeated Utxo utxos = 1;
  int32 total = 2;
}

message RecommendedFeeResponse {
  uint64 fastest_fee = 1;
  uint64 half_hour_fee = 2;
  uint64 hour_fee = 3;
  uint64 economy_fee = 4;
}

message CheckAvailableImageRequest {
  string collection_id = 1;
  string image_id = 2;
}

message CheckAvailableImageResponse {
  bool available = 1;
}


