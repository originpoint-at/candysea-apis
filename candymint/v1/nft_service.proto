syntax = "proto3";

package io.candysea.candymint.v1;

import "candymint/v1/message/collection.proto";
import "candymint/v1/message/inscription.proto";
import "candymint/v1/message/nft.proto";
import "candymint/v1/message/release.proto";
import "candymint/v1/message/utxo.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/originpoint-at/candysea-apis/candymint/v1";
option java_multiple_files = true;
option java_package = "io.candysea.candymint.v1";

service NftService {
  rpc ListNftIds(ListNftIdsRequest) returns (ListNftIdsResponse) {}
  rpc ListNFTs(ListNFTsRequest) returns (ListNFTsResponse) {}
  rpc GetNFT(GetNFTRequest) returns (io.candysea.candymint.v1.message.Nft) {}
  rpc GetMintPermit(GetMintPermitRequest) returns (GetMintPermitResponse) {}
  rpc GetMintedCount(GetMintedCountRequest) returns (GetMintedCountResponse) {}
}

// just for Custom collection
message ListNftIdsRequest {
  enum Type {
    // only for DEFAULT template type
    TYPE_UNSPECIFIED = 0;
    // only for DEFAULT template type
    AVAILABLE = 1;

    MINTED = 2;
  }
  string collection_id = 1;
  int32 limit = 2;
  int32 offset = 3;
  Type type = 4;
}

message ListNftIdsResponse {
  message NftId {
    string token_id = 1;
    string image_id = 2;
  }
  repeated NftId nft_ids = 1;
  int32 total = 2;
}

message ListNFTsRequest {
  string collection_name = 1;
  int32 limit = 2;
  int32 offset = 3;
  string chain_id = 4;
  string address = 5;
}

message ListNFTsResponse {
  repeated io.candysea.candymint.v1.message.Nft nfts = 1;
  int32 total = 2;
}

message GetNFTRequest {
  string collection_id = 1;
  string collection_name = 2;
  string token_id = 3;
  string chain_id = 4;
}

message GetMintPermitRequest {
  string collection_id = 1;
  // only require for evm collection
  string release_id = 2;
  string image_id = 3;
  string nft_hash = 4;
}

message GetMintPermitResponse {
  // common
  string signature = 1;
  string metadata_uri_or_image = 2;
  int64 token_id = 3;

  // only for evm collection
  string traits = 4;
  int64 timestamp = 5;
  bytes args1 = 13;
  bytes args2 = 14;

  // only for solana collection
  string name = 6;
  string symbol = 7;
  string description = 8;
  bytes image_id_digest = 9;
  string sol_project_account_pub_key = 10;
  bytes sol_sign_message = 11;
  bytes sol_data_signer_pub_key = 12;
}

message GetMintedCountRequest {
  string chain_id = 1;
  string nft_contract_address = 2;
  string suite = 3;
}

message GetMintedCountResponse {
  int32 minted_count = 1;
}
